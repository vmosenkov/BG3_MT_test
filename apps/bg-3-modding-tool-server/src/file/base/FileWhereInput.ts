/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { TextureWhereUniqueInput } from "../../texture/base/TextureWhereUniqueInput";
import { FolderWhereUniqueInput } from "../../folder/base/FolderWhereUniqueInput";
import { EnumFileFormat } from "./EnumFileFormat";

@InputType()
class FileWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  typeField?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TextureWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TextureWhereUniqueInput)
  @IsOptional()
  @Field(() => TextureWhereUniqueInput, {
    nullable: true,
  })
  texture?: TextureWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => FolderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FolderWhereUniqueInput)
  @IsOptional()
  @Field(() => FolderWhereUniqueInput, {
    nullable: true,
  })
  folder?: FolderWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumFileFormat,
  })
  @IsEnum(EnumFileFormat)
  @IsOptional()
  @Field(() => EnumFileFormat, {
    nullable: true,
  })
  format?: "Option1";
}

export { FileWhereInput as FileWhereInput };
