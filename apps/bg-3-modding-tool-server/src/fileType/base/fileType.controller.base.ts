/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileTypeService } from "../fileType.service";
import { FileTypeCreateInput } from "./FileTypeCreateInput";
import { FileType } from "./FileType";
import { FileTypeFindManyArgs } from "./FileTypeFindManyArgs";
import { FileTypeWhereUniqueInput } from "./FileTypeWhereUniqueInput";
import { FileTypeUpdateInput } from "./FileTypeUpdateInput";

export class FileTypeControllerBase {
  constructor(protected readonly service: FileTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileType })
  async createFileType(
    @common.Body() data: FileTypeCreateInput
  ): Promise<FileType> {
    return await this.service.createFileType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileType] })
  @ApiNestedQuery(FileTypeFindManyArgs)
  async fileTypes(@common.Req() request: Request): Promise<FileType[]> {
    const args = plainToClass(FileTypeFindManyArgs, request.query);
    return this.service.fileTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileType(
    @common.Param() params: FileTypeWhereUniqueInput
  ): Promise<FileType | null> {
    const result = await this.service.fileType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileType(
    @common.Param() params: FileTypeWhereUniqueInput,
    @common.Body() data: FileTypeUpdateInput
  ): Promise<FileType | null> {
    try {
      return await this.service.updateFileType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileType(
    @common.Param() params: FileTypeWhereUniqueInput
  ): Promise<FileType | null> {
    try {
      return await this.service.deleteFileType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
