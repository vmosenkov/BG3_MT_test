/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FileType } from "./FileType";
import { FileTypeCountArgs } from "./FileTypeCountArgs";
import { FileTypeFindManyArgs } from "./FileTypeFindManyArgs";
import { FileTypeFindUniqueArgs } from "./FileTypeFindUniqueArgs";
import { CreateFileTypeArgs } from "./CreateFileTypeArgs";
import { UpdateFileTypeArgs } from "./UpdateFileTypeArgs";
import { DeleteFileTypeArgs } from "./DeleteFileTypeArgs";
import { FileTypeService } from "../fileType.service";
@graphql.Resolver(() => FileType)
export class FileTypeResolverBase {
  constructor(protected readonly service: FileTypeService) {}

  async _fileTypesMeta(
    @graphql.Args() args: FileTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FileType])
  async fileTypes(
    @graphql.Args() args: FileTypeFindManyArgs
  ): Promise<FileType[]> {
    return this.service.fileTypes(args);
  }

  @graphql.Query(() => FileType, { nullable: true })
  async fileType(
    @graphql.Args() args: FileTypeFindUniqueArgs
  ): Promise<FileType | null> {
    const result = await this.service.fileType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FileType)
  async createFileType(
    @graphql.Args() args: CreateFileTypeArgs
  ): Promise<FileType> {
    return await this.service.createFileType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FileType)
  async updateFileType(
    @graphql.Args() args: UpdateFileTypeArgs
  ): Promise<FileType | null> {
    try {
      return await this.service.updateFileType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileType)
  async deleteFileType(
    @graphql.Args() args: DeleteFileTypeArgs
  ): Promise<FileType | null> {
    try {
      return await this.service.deleteFileType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
