/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Folder as PrismaFolder,
  File as PrismaFile,
} from "@prisma/client";

export class FolderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FolderCountArgs, "select">): Promise<number> {
    return this.prisma.folder.count(args);
  }

  async folders(args: Prisma.FolderFindManyArgs): Promise<PrismaFolder[]> {
    return this.prisma.folder.findMany(args);
  }
  async folder(
    args: Prisma.FolderFindUniqueArgs
  ): Promise<PrismaFolder | null> {
    return this.prisma.folder.findUnique(args);
  }
  async createFolder(args: Prisma.FolderCreateArgs): Promise<PrismaFolder> {
    return this.prisma.folder.create(args);
  }
  async updateFolder(args: Prisma.FolderUpdateArgs): Promise<PrismaFolder> {
    return this.prisma.folder.update(args);
  }
  async deleteFolder(args: Prisma.FolderDeleteArgs): Promise<PrismaFolder> {
    return this.prisma.folder.delete(args);
  }

  async findFiles(
    parentId: string,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.folder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }
}
