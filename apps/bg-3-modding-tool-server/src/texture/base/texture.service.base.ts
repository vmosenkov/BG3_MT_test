/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Texture as PrismaTexture,
  File as PrismaFile,
} from "@prisma/client";

export class TextureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TextureCountArgs, "select">): Promise<number> {
    return this.prisma.texture.count(args);
  }

  async textures(args: Prisma.TextureFindManyArgs): Promise<PrismaTexture[]> {
    return this.prisma.texture.findMany(args);
  }
  async texture(
    args: Prisma.TextureFindUniqueArgs
  ): Promise<PrismaTexture | null> {
    return this.prisma.texture.findUnique(args);
  }
  async createTexture(args: Prisma.TextureCreateArgs): Promise<PrismaTexture> {
    return this.prisma.texture.create(args);
  }
  async updateTexture(args: Prisma.TextureUpdateArgs): Promise<PrismaTexture> {
    return this.prisma.texture.update(args);
  }
  async deleteTexture(args: Prisma.TextureDeleteArgs): Promise<PrismaTexture> {
    return this.prisma.texture.delete(args);
  }

  async findFiles(
    parentId: string,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.texture
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }
}
