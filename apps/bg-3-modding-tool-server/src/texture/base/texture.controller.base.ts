/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TextureService } from "../texture.service";
import { TextureCreateInput } from "./TextureCreateInput";
import { Texture } from "./Texture";
import { TextureFindManyArgs } from "./TextureFindManyArgs";
import { TextureWhereUniqueInput } from "./TextureWhereUniqueInput";
import { TextureUpdateInput } from "./TextureUpdateInput";
import { FileFindManyArgs } from "../../file/base/FileFindManyArgs";
import { File } from "../../file/base/File";
import { FileWhereUniqueInput } from "../../file/base/FileWhereUniqueInput";

export class TextureControllerBase {
  constructor(protected readonly service: TextureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Texture })
  async createTexture(
    @common.Body() data: TextureCreateInput
  ): Promise<Texture> {
    return await this.service.createTexture({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        file: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Texture] })
  @ApiNestedQuery(TextureFindManyArgs)
  async textures(@common.Req() request: Request): Promise<Texture[]> {
    const args = plainToClass(TextureFindManyArgs, request.query);
    return this.service.textures({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        file: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Texture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async texture(
    @common.Param() params: TextureWhereUniqueInput
  ): Promise<Texture | null> {
    const result = await this.service.texture({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        file: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Texture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTexture(
    @common.Param() params: TextureWhereUniqueInput,
    @common.Body() data: TextureUpdateInput
  ): Promise<Texture | null> {
    try {
      return await this.service.updateTexture({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          file: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Texture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTexture(
    @common.Param() params: TextureWhereUniqueInput
  ): Promise<Texture | null> {
    try {
      return await this.service.deleteTexture({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          file: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/files")
  @ApiNestedQuery(FileFindManyArgs)
  async findFiles(
    @common.Req() request: Request,
    @common.Param() params: TextureWhereUniqueInput
  ): Promise<File[]> {
    const query = plainToClass(FileFindManyArgs, request.query);
    const results = await this.service.findFiles(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,

        texture: {
          select: {
            id: true,
          },
        },

        folder: {
          select: {
            id: true,
          },
        },

        format: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/files")
  async connectFiles(
    @common.Param() params: TextureWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        connect: body,
      },
    };
    await this.service.updateTexture({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/files")
  async updateFiles(
    @common.Param() params: TextureWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        set: body,
      },
    };
    await this.service.updateTexture({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/files")
  async disconnectFiles(
    @common.Param() params: TextureWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        disconnect: body,
      },
    };
    await this.service.updateTexture({
      where: params,
      data,
      select: { id: true },
    });
  }
}
